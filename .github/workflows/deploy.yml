name: Retrieve Salesforce
on:
  push:
    branches:
      - master
jobs:
  build:
    name: Setup
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: webfactory/ssh-agent@v0.5.2     
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock       
        with:
          ref: refs/heads/master
          fetch-depth: 1
          ssh-private-key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}            
      - run: ssh-add - <<< "${{ secrets.GIT_SSH_PRIVATE_KEY }}"      
      - run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
          ./sfdx-cli/install                              
      - run: | 
          export SFDX_CONTENT_TYPE=JSON
          echo ${{ secrets.SALESFORCE_AUTH_URL }} > sfdx.url
          sfdx force:auth:sfdxurl:store --sfdxurlfile=sfdx.url --setdefaultusername > sfdx_login.json 2>&1
          rm sfdx.url 
     
          login_status=$(cat sfdx_login.json | jq '.status')
          if [ $login_status -ne 0 ]; then
            echo "ERROR unable to login to Salesforce"
            echo cat sfdx_login.json | jq '.message'
            exit 1
          fi                    
      - run: |          
          # Clone Git Repository
          git clone ${{ secrets.GIT_REPOSITORY_CONNECTION }}
          cd ${{ secrets.GIT_REPOSITORY_FOLDER }}

          # Create Git branch
          temp_branch=$(date +'%Y%m%d-%H%M%S%N')
          git checkout -q -b $temp_branch     

          # Get Salesforce Metadata Types
          sfdx force:mdapi:describemetadata --json > ../sfdx_types.json                    
          sfdx_types_status=$(cat ../sfdx_types.json | jq -r '.result')
          if [ $sfdx_types_status -ne 0 ]; then
            echo "ERROR unable to read Salesforce Metadata Types"
            echo cat ../sfdx_types.json | jq -r '.message'
            exit 1
          fi

          retrieve_salesforce_type() {
            local sfdx_type=$1

            # Skip Unsupported Types NB may 
            # if [ $sfdx_type -eq "MutingPermissionSet" ]; then
            #   return
            # fi 

            if [ $sfdx_type -ne "ApexClass" ]; then
              return
            fi

            local sfdx_type_output="../sfdx_type_${sfdx_type}.json"                        
            sfdx force:source:retrieve --metadata=$sfdx_type --loglevel=error > $sfdx_type_output
          } 

          # Get each Metadata Type from Salesforce
          sfdx_types=$(cat ../sfdx_types.json | jq -r '.result.metadataObjects[].xmlName')
          for sfdx_type in $sfdx_types; do               
            retrieve_salesforce_type $sfdx_type & # & means run function in background thread
          done
          wait # for background threads to complete

          # Add to Git temporary branch
          git add -A
          git commit -m $temp_branch
          git push --set-upstream origin $temp_branch

          # Merge into Git target branch
          target_branch='master'
          git merge $target_branch
          git checkout $target_branch
          git merge $target_branch
          git push --set-upstream origin $target_branch

